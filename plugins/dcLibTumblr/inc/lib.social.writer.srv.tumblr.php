<?php
# -- BEGIN LICENSE BLOCK ----------------------------------
# This file is part of dcLibTumblr, a plugin for Dotclear 2.
# 
# Copyright (c) 2009-2011 JC Denis and contributors
# jcdenis@gdwd.com
# 
# Licensed under the GPL version 2.0 license.
# A copy of this license is available in LICENSE file or at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# -- END LICENSE BLOCK ------------------------------------
if (!defined('DC_RC_PATH')){return;}class tumblrSoCialMeWriterService extends soCialMeService{	protected $part = 'writer';	protected $setting_ns = 'dcLibTumblr';	protected $setting_id = 'soCialMe_wrtier';	protected $config = array('email'=>'','password'=>'');	protected $define = array(		'id' => 'tumblr',		'name' => 'Tumblr',		'home' => 'http://www.tumblr.com',		'icon' => 'pf=dcLibTumblr/icon.png'	);	protected $actions = array(		'playMessageContent' => true,		'playLinkContent' => true,		'playDataContent' => false, // todo		'playArticleContent' => true	);		public function init()	{		$this->readSettings();		$this->available = true;		return true;	}		public function adminSave($service_id,$admin_url)	{		if ($service_id != $this->id || empty($_REQUEST['save'])) return;				if (!empty($_POST['dcLibTumblr_mail']))		{			if (!empty($_POST['dcLibTumblr_pass']))			{				$this->config['password'] = $_POST['dcLibTumblr_pass'];			}			elseif ($_POST['dcLibTumblr_mail'] != $this->config['email'])			{				$this->config['password'] = '';			}			$this->config['email'] = $_POST['dcLibTumblr_mail'];		}		else		{			$this->config['email'] = $this->config['password'] = '';		}		$this->writeSettings();	}		public function adminForm($service_id,$admin_url)	{		$admin_url = str_replace('&','&amp;',$admin_url);				return  		'<form id="dcLibTumblr-form" method="post" action="'.$admin_url.'">'.		'<p><label class="classic">'.__('Email:').'<br />'.		form::field('dcLibTumblr_mail',50,255,$this->config['email']).		'</label></p>'.		'<p><label class="classic">'.__('Password:').'<br />'.		form::password('dcLibTumblr_pass',50,255,'').		'</label></p>'.		'<p><input type="submit" name="save" value="'.__('save').'" />'.		$this->core->formNonce().'</p>'.		'</form>';	}		public function playMessageContent($msg,$has_url=false)	{		if (empty($msg)) return false;				$data = array(			'type' => 'regular',			'body' => $msg,			'format' => 'markdown'		);		return $this->send($data);	}		public function playLinkContent($title,$url,$type='link')	{		if (empty($url)) return false;				$data = array(			'type' => 'link',			'url' => $url		);		if (!empty($title)) {			$data['description'] = $title;		}				return $this->send($data);	}		public function playData($title,$type,$url,$data=null)	{		return false; //todo	}		public function playArticleContent($record)	{		if (!is_array($record) || empty($record['title']) || empty($record['content'])) return false;				$body = !empty($record['excerpt']) ? $record['excerpt'] : '';				$data = array(			'type' => 'regular',			'title' => $record['title'],			'body' => $body.$record['content'],			'format' => 'html'		);		if (!empty($record['tags'])) $data['tags'] = $record['tags'];				return $this->send($data);	}		private function send($data)	{		if (empty($data) || empty($this->config['email']) || empty($this->config['password'])) return;				$data = array_merge($data,array(			'email'     => $this->config['email'],			'password'  => $this->config['password'],			'generator' => 'soCialMeWriter'		));				$url = 'http://www.tumblr.com/api/write';		$client = netHttp::initClient($url,$url);		$client->setUserAgent('soCialMeWriter');		$client->setPersistReferers(false);		$client->post($url,$data);				return $client->getStatus() != 201;	}}?>