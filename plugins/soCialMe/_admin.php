<?php
# -- BEGIN LICENSE BLOCK ----------------------------------
# This file is part of soCialMe, a plugin for Dotclear 2.
# 
# Copyright (c) 2009-2011 JC Denis and contributors
# jcdenis@gdwd.com
# 
# Licensed under the GPL version 2.0 license.
# A copy of this license is available in LICENSE file or at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# -- END LICENSE BLOCK ------------------------------------
if (!defined('DC_CONTEXT_ADMIN')){return;}$_menu['Plugins']->addItem(	__('Social'),	'plugin.php?p=soCialMe','index.php?pf=soCialMe/icon.png',	preg_match('/plugin.php\?p=soCialMe(&.*)?$/',$_SERVER['REQUEST_URI']),	$core->auth->check('admin',$core->blog->id));require_once dirname(__FILE__).'/_widgets.php';# Admin behaviors$core->addBehavior('adminPostHeaders',array('soCialMeWriterAdmin','adminPostHeaders'));$core->addBehavior('adminPostFormSidebar',array('soCialMeWriterAdmin','adminPostFormSidebar'));$core->addBehavior('adminAfterPostUpdate',array('soCialMeWriterAdmin','adminAfterPostUpdate'));$core->addBehavior('adminAfterPostCreate',array('soCialMeWriterAdmin','adminAfterPostCreate'));$core->addBehavior('adminPostsActions',array('soCialMeWriterAdmin','adminPostsActions'));class soCialMeWriterAdmin{	# Added expandable feature	# /admin/post.php#L292	public static function adminPostHeaders($posts_actions=true)	{		return dcPage::jsLoad('index.php?pf=soCialMe/js/adminpost.js');	}		# Added hidden field to check post status change for auto tweet	# /admin/post.php#L447	public static function adminPostFormSidebar($post)	{		global $core;				if (!$core->blog->settings->soCialMeWriter->active) {			return;		}
				# Remind old post status, check new post, uncheck update post
		if ($post === null)
		{			$old_post_status = -1;
			$check = true;
		}
		else {
			$old_post_status = $post->post_status;
			$check = false;
		}
				
		# Check user right		$can_publish = $core->auth->check('publish,contentadmin',$core->blog->id);		if (!$core->auth->check('contentadmin',$core->blog->id))		{			if ($post === null) {				$can_publish = false;			}			else {				$rs = $this->con->select(					'SELECT post_id '.					'FROM '.$this->prefix.'post '.					'WHERE post_id = '.$id.' '.					"AND user_id = '".$core->con->escape($core->auth->userID())."' "				);				$can_publish = !$rs->isEmpty();			}		}		# Has right, show option		if ($can_publish) {			echo 			'<h3 id="socialwriter-form-title">'.__('soCialMe writer').'</h3>'.			'<div id="socialwriter-form-content">'.			'<p class="label"><label class="classic">'.			form::checkbox('socialwriter_send','1',$check).' '.			__('Share this').'</label>'.			form::hidden(array('socialwriter_old_post_status'),(string) $old_post_status).			'</p></div>';		}		else {			echo '<div>'.			form::hidden(array('socialwriter_old_post_status'),(string) $old_post_status).			'</div>';		}	}		# On post create	# /admin/post.php#L230	public static function adminAfterPostUpdate($cur,$post_id)	{		self::adminAfterPostSave($cur,$post_id,true);	}		# On post update	# /admin/post.php#L251	public static function adminAfterPostCreate($cur,$post_id)	{		self::adminAfterPostSave($cur,$post_id,false);	}		# On multiple posts update	# /admin/posts_actions.php#L62	public static function adminPostsActions($core,$posts,$action,$redir)	{		if ($action == 'publish' 		 && $core->auth->check('publish,contentadmin',$core->blog->id) 		 && $core->blog->settings->soCialMeWriter->active)		{			try {								// user status				$req_user = '';				if (!$core->auth->check('contentadmin',$core->blog->id)) {					$req_user = "AND user_id = '".$core->con->escape($core->auth->userID())."' ";				}								while ($posts->fetch()) {									// get old status to send only post goes pusblished					$rs_olds = $core->con->select(						'SELECT post_id FROM '.$core->prefix.'post '.						"WHERE blog_id = '".$core->con->escape($core->blog->id)."' ".						'AND post_status != 1 '.						$req_user.						'AND post_id = '.$posts->post_id					);										// if status goes published					if (!$rs_olds->isEmpty())					{						self::onPostSave($core,$posts,$posts->post_id,true);					}				}			}			catch (Exception $e) {				$core->error->add($e->getMessage());			}		}	}		# Filter from adminAfterPostCreate, adminAfterPostUpdate to onPostSave	private static function adminAfterPostSave($cur,$post_id,$is_update)	{		global $core;
		
		# Active and published
		if (!$core->blog->settings->soCialMeWriter->active
		|| $cur->post_status != 1) return;
		
		# From post form
		if (isset($_POST['socialwriter_old_post_status']))
		{
			if (empty($_POST['socialwriter_send']) || !$core->auth->check('publish,contentadmin',$core->blog->id)) return;
		}
		
		self::onPostSave($core,$cur,$post_id,$is_update);	}		# send message on post create/update	private static function onPostSave($core,$cur,$post_id,$is_update)	{		$key = $is_update ? 'postupdate' : 'postpublish';				# Active		if (!$core->blog->settings->soCialMeWriter->active) return;				# Load services		$soCialMeWriter = new soCialMeWriter($core);				# List of service per action		$actions = $soCialMeWriter->getMarker('action');				# List of format per type		$formats = $soCialMeWriter->getMarker('format');				# prepare data		// shorten url		$url = $core->blog->url.$core->getPostPublicURL($cur->post_type,html::sanitizeURL($cur->post_url));		$posturl = soCialMeUtils::reduceURL($url);		$posturl = $posturl ? $posturl : $url;		// author		$user = $core->getUser($cur->user_id);		$postauthor = dcUtils::getUserCN($user->user_id,$user->user_name,$user->user_firstname,$user->user_displayname);		// get tags		$meta = '';		$meta_array = array();		$rs_meta = $core->meta->getMetadata(array('meta_type'=>'tag','post_id'=>$post_id));		if (!$rs_meta->isEmpty()) {			while($rs_meta->fetch()) {				$meta .= ' #'.$rs_meta->meta_id;				$meta_array[] = $rs_meta->meta_id;			}		}		// get category		$cat = '';		$cat_array = array();		if ($cur->cat_id) {			$rs_cat = $core->blog->getCategory($cur->cat_id);			if (!$rs_cat->isEmpty()) {				$cat = '#'.$rs_cat->cat_title;				$cat_array[] = $rs_cat->cat_title;			}		}				# sendMessage		if (!empty($formats[$key]['Message']) && !empty($actions[$key]['Message']))		{			// parse message			$message_txt = str_replace(				array('%blog%','%title%','%url%','%author%','%category%','%tags%'),				array($core->blog->name,$cur->post_title,$posturl,$postauthor,$cat,$meta),				$formats[$key]['Message']			);						// send message			if (!empty($message_txt))			{				foreach($actions[$key]['Message'] as $service_id)				{					$soCialMeWriter->play($service_id,'Message','Content',$message_txt);				}			}		}				# sendLink		if (!empty($actions[$key]['Link']))		{			foreach($actions[$key]['Link'] as $service_id)			{				$soCialMeWriter->play($service_id,'Link','Content',$cur->post_title,$posturl);			}		}				# sendData		// not yet implemented				#sendArticle		if (!empty($actions[$key]['Article']))		{			$record = soCialMeUtils::fillPlayRecord(array(				'url' => $post_url,				'shorturl' => soCialMeUtils::reduceURL($post_url),				'title' => $cur->post_title,				'excerpt' => $cur->post_excerpt_xhtml,				'content' => $cur->post_content_xhtml,				'author' => $postauthor,				'tags' => implode(',',$meta_array),				'category' => implode(',',$cat_array)			));						foreach($actions[$key]['Article'] as $service_id)			{				$soCialMeWriter->play($service_id,'Article','Content',$record);			}		}	}}?>