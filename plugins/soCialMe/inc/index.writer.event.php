<?php
# -- BEGIN LICENSE BLOCK ----------------------------------
# This file is part of soCialMe, a plugin for Dotclear 2.
# 
# Copyright (c) 2009-2011 JC Denis and contributors
# jcdenis@gdwd.com
# 
# Licensed under the GPL version 2.0 license.
# A copy of this license is available in LICENSE file or at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# -- END LICENSE BLOCK ------------------------------------
if (!defined('DC_CONTEXT_ADMIN')){return;}# Services featuresforeach($page['class']->things() as $thing => $title){	$things[$thing] = __($title);	$usable[$thing] = $page['class']->can($thing.'Content');}# Writer features and settings$markers = $page['class']->getMarkers();$s_action = $page['class']->getMarker('action',array());$s_format = $page['class']->getMarker('format','');# Save settingsif ($request_act == 'save'){	try	{		foreach($markers as $key => $marker)		{			foreach($marker['action'] as $action)			{				if (empty($usable[$action])) continue;								$s_action[$key][$action] = !empty($_POST['s_action_'.$key.'_'.$action]) && is_array($_POST['s_action_'.$key.'_'.$action]) ?					array_keys($_POST['s_action_'.$key.'_'.$action]) : array();			}						foreach($marker['format'] as $format)			{				$s_format[$key][$format] = !empty($_POST['s_format_'.$key.'_'.$format]) ? $_POST['s_format_'.$key.'_'.$format] : '';			}		}				# save		$page['setting']->put('action',base64_encode(serialize($s_action)));		$page['setting']->put('format',base64_encode(serialize($s_format)));				$core->blog->triggerBlog();				http::redirect(soCialMeUtils::link(0,$request_page,$request_part,'','&section='.$request_section));	}	catch (Exception $e)	{		$core->error->add($e->getMessage());	}}# Settings formecho soCialMeUtils::top($page,dcPage::jsLoad('index.php?pf=soCialMe/js/action.js')).'<p>'.__('Configure services to use on each event of your blog.').'</p>'.'<form id="action-form" method="post" action="'.soCialMeUtils::link(1,$request_page).'">';foreach($markers as $key => $marker){	$display = false;	foreach($marker['action'] as $action)	{		if (!empty($usable[$action])) { $display = true; break; }	}	if (!$display) continue;	echo 	'<fieldset id="action-'.$key.'"><legend>'.$marker['name'].'</legend>'.	'<p>'.$marker['description'].'</p>';		foreach($marker['action'] as $action)	{		if (empty($usable[$action])) continue;				echo '<div class="socialbox"><h4>'.$things[$action].'</h4><ul>';				foreach($usable[$action] as $service_id)		{			$service = $page['class']->services($service_id);			$check = isset($s_action[$key][$action]) && in_array($service_id,$s_action[$key][$action]);						echo 			'<li><label class="classic">'.			form::checkbox(array('s_action_'.$key.'_'.$action.'['.$service_id.']'),'1',$check).			($service->icon ? '<img src="'.$service->icon.'" alt="'.$service->name.'" /> ' : '').			$service->name.'</label></li>';		}				echo '</ul>';				if (in_array($action,$marker['format']))		{			$field = isset($s_format[$key][$action]) ? $s_format[$key][$action] : '';						echo 			'<p><label class="classic">'.__('Format:').'<br />'.			form::field(array('s_format_'.$key.'_'.$action),50,255,$field).			'</label></p>';						if (empty($marker['wildcards'][$action])) continue;			echo '<p class="form-note">'.sprintf(				__('You can use wildcards like %s'),				implode(', ',$marker['wildcards'][$action])			).'</p>';		}		echo '</div>';	}	echo '</fieldset>';}echo '<div class="clear">'.'<p><input type="submit" name="save" value="'.__('save').'" />'.$core->formNonce().form::hidden(array('p'),'soCialMe').form::hidden(array('page'),$request_page).form::hidden(array('part'),$request_part).form::hidden(array('section'),$request_section).form::hidden(array('act'),'save').'</p></div>'.'</form>';?>