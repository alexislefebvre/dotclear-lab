<?php/*			PHP Hyphenation 1.3			Developed by yellowgreen designbüro published under MIT License.						http://yellowgreen.de/soft-hyphenation-generator/			http://yellowgreen.de/hyphenation-in-web/			http://www.opensource.org/licenses/mit-license.php						Adapted by Franck Paul for Dotclear 2 on 12 December 2008			- 17 december 2008:				- Fix a bug which prevents to ignore all pre, code, ... tags (only the first was taken into account)				- Add spanish, dutch and swedish languages				- Add kbd and math tags to default ignore list*/// Function: Preset based on languagefunction preset_hyphenation($language, &$path_to_patterns, &$dictionary, &$leftmin, &$rightmin, &$charmin){	$hyphenate = false;	if (($language == 'de') || ($language == 'en') || ($language == 'fr') || 		($language == 'es') || ($language == 'nl') || ($language == 'sv')) {		$hyphenate = true;		$path_to_patterns = dirname(__FILE__)."/patterns/";		$dictionary = dirname(__FILE__)."/patterns/dictionary".$language.".txt";		switch ($language) {			case "fr":				$leftmin = 3;				$rightmin = 3;				$charmin = 6;				break;			default:				$leftmin = 2;				$rightmin = 2;				$charmin = 4;				break;		}	}	return $hyphenate;}// Function: Replace by comparingfunction str_replace_comp ($needle, $replace, $string_a, $string_b) {	$position = 0;	while ($position !== false && $position < mb_strlen($string_a)) {		$position = mb_strpos($string_a, $needle, $position + 1);		if ($position != 0) $string_b = mb_substr($string_b, 0, $position).$replace.mb_substr($string_b, $position);	}	return $string_b;}// Function: Word hyphenationfunction word_hyphenation ($word, $patterns, $dictionary, $dictionary_words, $leftmin, $rightmin, $charmin, $hyphen) {	if (mb_strlen($word) < $charmin) return $word;		if (($key = array_search(strtolower($word), $dictionary_words)) !== false)		return str_replace_comp("/", $hyphen, trim($dictionary[$key]), $word);	$positions = "";	$hyphenated_word = "";	$word_without_hyphen = "";	$tex_word = " ".mb_strtolower($word)." ";	for ($i = 0; $i < mb_strlen($tex_word); $i++) $positions .= 0;		for ($start = 0; $start < mb_strlen($tex_word); $start++) {		for ($length = 1; $length <= mb_strlen($tex_word) - $start; $length++) {			$patterns_index = mb_substr(mb_substr($tex_word, $start), 0, $length);			if (isset($patterns[$patterns_index])) {				$values = $patterns[$patterns_index];				$i = $start;								for ($p = 0; $p < mb_strlen($values); $p++) {					$value = mb_substr($values, $p, 1);						if ($value > $positions[$i - 1]) $positions[$i - 1] = $value;					$i++;				}			}		}	}		$positions = trim($positions);	for ($i = 0; $i < mb_strlen($word); $i++) {		$word_without_hyphen = str_replace($hyphen, "", $hyphenated_word);		if ($positions[$i] % 2 != 0 && $i != 0 && $i >= $leftmin && $i <= mb_strlen($word) - $rightmin) 			$hyphenated_word .= mb_substr($word, mb_strlen($word_without_hyphen), $i - mb_strlen($word_without_hyphen)) . $hyphen;	}		$hyphenated_word .= mb_substr($word, mb_strlen($word_without_hyphen), $i - mb_strlen($word_without_hyphen));	return $hyphenated_word;}// Function: Text hyphenationfunction hyphenation ($text, $language = "de", $path_to_patterns = "patterns/", $dictionary = "dictionnary.txt",	$leftmin = 2, $rightmin = 2, $charmin = 4, $exclude_tags = array("code", "pre", "script", "kbd", "math", "style"), $hyphen = "&shy;"){	$word = ""; 	$tag = ""; 	$tag_jump = 0; 	$output = array();	mb_internal_encoding("utf-8");	if (file_exists($path_to_patterns.$language.".php"))		include ($path_to_patterns.$language.".php");	else		$patterns = array();	file_exists($dictionary) ? $dictionary = file($dictionary) : $dictionary = array();	$dictionary_words = $dictionary;	for ($i = 1; $i < count($dictionary); $i++)		$dictionary_words[$i] = str_replace("/", "", strtolower(trim($dictionary[$i])));	$word_boundaries = "<>\t\n\r\0\x0B !\"§$%&/()=?….,;:-–_„”«»‘’'/\\‹›()[]{}*+´`^|©℗®™℠¹²³";	$text = $text . " ";	for ($i = 0; $i < mb_strlen($text); $i++) {		$char = mb_substr($text, $i, 1);		if (mb_strpos($word_boundaries, $char) === false && $tag == "") {			$word .= $char;		} else {			if ($word != "") {				$output[] = word_hyphenation($word, $patterns, $dictionary, $dictionary_words, $leftmin, $rightmin, $charmin, $hyphen);				$word = ""; 			}			if ($tag != "" || $char == "<") 				$tag .= $char;			if ($tag != "" && $char == ">") {				$tag_name = (mb_strpos($tag, " ")) ? mb_substr($tag, 1, mb_strpos($tag, " ") - 1) : mb_substr($tag, 1, mb_strpos($tag, ">") - 1);				if ($tag_jump == 0) {					if (in_array(strtolower($tag_name), $exclude_tags))						$tag_jump = 1; 					else {						$output[] = $tag; 						$tag = "";					}				} else {					$output[] = $tag; 					$tag = "";					$tag_jump = 0; // Franck Paul le 17/12/2008				}			}			if ($tag == "" && $char != "<" && $char != ">")				$output[] = $char;		}	}		$text = join($output);	return substr($text, 0, strlen($text) - 1);}?>