<?php
# -- BEGIN LICENSE BLOCK ----------------------------------
# This file is part of dcLibTwitter, a plugin for Dotclear 2.
# 
# Copyright (c) 2009-2011 JC Denis and contributors
# jcdenis@gdwd.com
# 
# Licensed under the GPL version 2.0 license.
# A copy of this license is available in LICENSE file or at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# -- END LICENSE BLOCK ------------------------------------
if (!defined('DC_RC_PATH')){return;}# Add twitter to plugin soCialMe (reader part)class twitterSoCialMeReaderService extends soCialMeService{	protected $part = 'reader';		protected $define = array(		'id' => 'twitter',		'name' => 'Twitter',		'home' => 'http://twitter.com',		'icon' => 'pf=dcLibTwitter/icon.png'	);		protected $actions = array(		'playFeed' => true	);		private $oauth = false;		protected function init()	{		# Required plugin oAuthManager		# Used name of parent plugin		if (soCialMeUtils::checkPlugin('oAuthManager','0.1'))		{			$this->oauth = oAuthClient::load($this->core,'twitter',				array(					'user_id' => null,					'plugin_id' => 'soCialMeReader',					'plugin_name' => __('SoCialMe Reader'),					'token' => 'fjWBGGA5qkR009ZikITvQ',					'secret' => '1Une37GYVs3Xn0zMHAcX5kq1KFfos2uMrwXd5aJ9U'				)			);		}				if (false === $this->oauth)		{			$this->available = false;			return false;		}				$this->available = true;		return true;	}		public function adminSave($service_id,$admin_url)	{		if (!$this->available || $service_id != $this->id) return;				$request_step = !empty($_REQUEST['step']) ? $_REQUEST['step'] : null;				if (!$request_step)		{			return;		}		elseif ($request_step == 'request')		{			$this->oauth->getRequestToken($admin_url.'&step=callback');		}		elseif ($request_step == 'callback')		{			$this->oauth->getAccessToken();		}		elseif ($request_step == 'clean')		{			$this->oauth->removeToken();		}	}		public function adminForm($service_id,$admin_url)	{		if (!$this->available) return;		$admin_url = str_replace('&','&amp;',$admin_url);				$res = '<p>';		if ($this->oauth->state() == 1)		{			$res .= '<a class="button" href="'.$admin_url.'&amp;step=clean">'.sprintf(__('Something went wrong, clean acces of %s from %s'),$this->oauth->config('plugin_name'),$this->oauth->config('client_name')).'</a>';		}		elseif ($this->oauth->state() == 2)		{			$res .= '<a class="button" href="'.$admin_url.'&amp;step=clean">'.sprintf(__('Disconnet %s from %s'),$this->oauth->config('plugin_name'),$this->oauth->config('client_name')).'</a>';		}		elseif ($this->oauth->state() == 0)		{			$res .= '<a class="button" href="'.$admin_url.'&amp;step=request">'.sprintf(__('Connect %s to %s'),$this->oauth->config('plugin_name'),$this->oauth->config('client_name')).'</a>';		}		$res .= '</p>';				return $res;	}}?>