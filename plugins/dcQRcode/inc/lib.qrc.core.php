<?php
# -- BEGIN LICENSE BLOCK ----------------------------------
# This file is part of dcQRcode, a plugin for Dotclear 2.
# 
# Copyright (c) 2009-2011 JC Denis and contributors
# jcdenis@gdwd.com
# 
# Licensed under the GPL version 2.0 license.
# A copy of this license is available in LICENSE file or at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# -- END LICENSE BLOCK ------------------------------------

if (!defined('DC_RC_PATH')){return;}
abstract class QRcodeCore{	private $accept = array(		'type' => array(			// see registerType()		),		'output_encoding' => array(			'UTF-8','Shift_JIS','ISO-8859-1'		),		'error_correction_level' => array(			'L','M','Q','H'		),		'margin' => array(			1,2,4,6,8		),		'size' => array(			64,92,128,196,256,512		)	);		private $params = array(		'api_url' => 'http://chart.apis.google.com/chart?',		'type' => 'URL',		'output_encoding' => 'UTF-8',		'error_correction_level' => 'L',		'margin' => 1,		'size' => 128,		'mebkm' => true,		'cache_path' => null,		'prefix' => 'qrc_'	);		protected $id = null;	protected $data = null;		abstract protected function tweakEncode($args);	abstract protected function tweakDecode($id);	abstract public function getURL($id);	abstract protected function getId();	abstract protected function setId();		public function getAccept($k=null)	{		if (null === $k) {			return $this->accept;		}		return array_key_exists($k,$this->accept) ?			$this->accept[$k] : null;	}		public function getParam($k=null)	{		if (null === $k) {			return $this->params;		}		return array_key_exists($k,$this->params) ?			$this->params[$k] : null;	}		public function setApiURL($api_url)	{		$this->params['api_url'] = $api_url;		return true;	}		public function registerType($type,$class)	{		$this->accept['type'][$type] = $class;	}		public function setType($type)	{		if (!array_key_exists($type,$this->accept['type'])) {			throw new Exception('Unknow QR code type.');			return false;		}		$this->params['type'] = $type;	}		public function setOutputEncoding($output_encoding)	{		if (!in_array($output_encoding,$this->accept['output_encoding'])) {			throw new Exception('Unknow QR code output encoding.');			return false;		}		$this->params['output_encoding'] = $output_encoding;	}		public function setErrorCorrectionLevel($error_correction_level)	{		if (!in_array($error_correction_level,$this->accept['error_correction_level'])) {			throw new Exception('Unknow QR code error correction level');			return false;		}		$this->params['error_correction_level'] = $error_correction_level;	}		public function setMargin($margin)	{		if (!in_array($margin,$this->accept['margin'])) {			throw new Exception('Unknow QR code margin');			return false;		}		$this->params['margin'] = $margin;	}		public function setSize($size)	{		if (!in_array($size,$this->accept['size'])) {			throw new Exception('Unknow QR code size');			return false;		}		$this->params['size'] = $size;	}		public function setMebkm($mebkm)	{		$this->params['mebkm'] = (boolean) $mebkm;	}		public function setCachePath($cache_path)	{		if ($cache_path !== null && (!is_dir($cache_path) || !is_writable($cache_path))) {			throw new Exception('Unknow or unwritable QR code cache path.');			return false;		}		$this->params['cache_path'] = $cache_path;	}		public function setPrefix($prefix)	{		$this->params['prefix'] = preg_match('/^[a-zA-Z_-]{3,6}^/',$prefix) ? $prefix : 'qrc_';	}	public function cleanCache()	{		if (!is_dir($this->params['cache_path'])) return null;//!todo: fix this, as it could be dangerous		//return files::delTree($this->params['cache_path']);	}		public function getArgs()	{		$args = array();		$args['cht'] = 'qr';		$args['chs'] = $this->params['size'].'x'.$this->params['size'];		$args['choe'] = $this->params['output_encoding'];		$args['chld'] = $this->params['error_correction_level'].'|'.$this->params['margin'];		$args['chl'] = $this->data;				return $args;	}		public function encodeData()	{		$num_args = func_num_args();		$args = func_get_args();				$data = '';				if (array_key_exists($this->params['type'],$this->accept['type'])) {			try {				$data = call_user_func_array(					array($this->accept['type'][$this->params['type']],'encodeData'),					array($this,$args)				);			}			catch (Exception $e) {}		}				$this->data = (string) $data;				$this->tweakEncode($args); // could extends type				if (empty($this->data)) {			$this->data = $this->params['type'] = null;		}				return empty($this->params['type']) ? null : $this->setId();	}	public function decodeData($id)	{		$this->id = (integer) $id;				$this->tweakDecode($id); // could intercept id				return $this->getId();	}		public function getTitle()	{		if (array_key_exists($this->params['type'],$this->accept['type'])) {			try {				return call_user_func_array(					array($this->accept['type'][$this->params['type']],'getTitle'),					array($this)				);			}			catch (Exception $e) {}		}		return null;	}		public function getForm()	{		if (array_key_exists($this->params['type'],$this->accept['type'])) {			try {				return call_user_func_array(					array($this->accept['type'][$this->params['type']],'getForm'),					array($this)				);			}			catch (Exception $e) {}		}		return null;	}		public function saveForm()	{		if (array_key_exists($this->params['type'],$this->accept['type'])) {			try {				return call_user_func_array(					array($this->accept['type'][$this->params['type']],'saveForm'),					array($this)				);			}			catch (Exception $e) {}		}		return null;	}		public function getTemplate($attr)	{		if (array_key_exists($this->params['type'],$this->accept['type'])) {			try {				return call_user_func_array(					array($this->accept['type'][$this->params['type']],'getTemplate'),					array($this,$attr)				);			}			catch (Exception $e) {}		}		return null;	}		public function imagePath($id)	{		$id = abs((integer) $id);		return $this->params['cache_path'].'/'.$this->params['prefix'].$id.'.png';	}	public function getImage($force_no_cache=false)	{		$f = $this->imagePath($this->id);		if ($this->params['cache_path'] !== null && file_exists($f) && !$force_no_cache)		{			self::headers();			readfile($f);		}		else		{			try			{				$args = $this->getArgs();				$path = '';				$client = netHttp::initClient($this->params['api_url'],$path);				$client->setUserAgent('dcQRcode - http://dotclear.jcdenis.com/');				$client->useGzip(false);				$client->setPersistReferers(false);				$client->get($path,$args);				$response = $client->getContent();			}			catch (Exception $e)			{				throw new Exception('An error occured: '.$e->getMessage());			}			if ($client->getStatus() != 200)			{				throw new Exception('Failed to get content: <pre>'.print_r($args,true).'</pre>');			}			else			{				if ($this->params['cache_path'] !== null && !$force_no_cache)				{					@file_put_contents($f,$response);				}				self::headers();				echo $response;			}		}		exit;	}		protected static function headers()	{		header('Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0');		header('Pragma: no-cache');		header('Content-type: image/png');	}		public static function escape($str,$escape=false,$toUTF8=true)	{		if ($toUTF8) {			$str = text::toUTF8($str);		}/*		if ($escape) {			$str = str_replace(				array('е',':',';',','),				array('ее','е:','е;','е,'),				$str			);		}//*/		return $str;	}	public static function unescape($str)	{/*		$str = str_replace(			array('ее','е:','е;','е,'),			array('е',':',';',','),			$str		);//*/		return $str;	}}?>